"""empty message

Revision ID: de97dabb56e0
Revises: 
Create Date: 2024-01-28 19:59:20.220629

"""
import os.path
import json
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils

from passlib.context import CryptContext

# revision identifiers, used by Alembic.
revision: str = 'de97dabb56e0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    user_table = op.create_table('users',
                                 sa.Column('id', sa.Integer(), nullable=False),
                                 sa.Column('username', sa.String(length=20), nullable=False),
                                 sa.Column('password', sa.String(length=60), nullable=False),
                                 sa.Column('created_at', sa.DateTime(), nullable=False),
                                 sa.Column('updated_at', sa.DateTime(), nullable=False),
                                 sa.PrimaryKeyConstraint('id')
                                 )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    profile_table = op.create_table('profiles',
                                    sa.Column('id', sa.Integer(), nullable=False),
                                    sa.Column('email', sqlalchemy_utils.types.email.EmailType(length=255),
                                              nullable=False),
                                    sa.Column('first_name', sa.String(length=20), nullable=False),
                                    sa.Column('last_name', sa.String(length=20), nullable=False),
                                    sa.Column('bio', sa.Text(), nullable=True),
                                    sa.Column('user_id', sa.Integer(), nullable=False),
                                    sa.Column('created_at', sa.DateTime(), nullable=False),
                                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
                                    sa.PrimaryKeyConstraint('id')
                                    )
    op.create_index(op.f('ix_profiles_email'), 'profiles', ['email'], unique=True)
    op.create_index(op.f('ix_profiles_id'), 'profiles', ['id'], unique=False)
    # ### end Alembic commands ###
    # Seed data operations

    ## Insert user data
    with open(os.path.join(os.path.dirname(__file__), '../seed_data/users.json')) as f:
        user_data = f.read()

    # We need to hash passwords before inserting
    json_user_data = json.loads(user_data)

    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    for user in json_user_data:
        user['password'] = pwd_context.hash(user['password'])

    op.bulk_insert(user_table, json_user_data)

    ## Insert profile data
    with open(os.path.join(os.path.dirname(__file__), '../seed_data/profiles.json')) as f:
        profile_data = f.read()

    op.bulk_insert(profile_table, json.loads(profile_data))


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_profiles_id'), table_name='profiles')
    op.drop_index(op.f('ix_profiles_email'), table_name='profiles')
    op.drop_table('profiles')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
